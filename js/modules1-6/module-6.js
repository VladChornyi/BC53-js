const body = document.querySelector("body");

const title = document.getElementById("title");

const list = document.querySelector(".list");

// const dataTopic = document.querySelectorAll('[data-topic]');
// dataTopic.forEach(el => console.log(el));

// const forEach = callBack => {
//   const index = 0;
//   const element = '<div></div>';
//   const array = ['<div></div>', '<div></div>', '<div></div>'];
//   callBack(element, index, array);
// };
// const dataTopicEl = document.querySelector('[data-topic]');
// console.log(dataTopicEl);

// const dataTopic = document.querySelectorAll('[data-topic]');
// //console.log(dataTopic[dataTopic.length - 1])
// const a = title.nextElementSibling;
// // console.log(a)
// const subtitles = document.querySelectorAll('h3');
// subtitles.forEach(el => el.classList.add('active'));

// const navigation = document.querySelector('li[data-topic="navigation"]');
// console.log(navigation);
// navigation.style.backgroundColor = 'yellow';
// navigation.lastChild.textContent = '–Ø –∑–º—ñ–Ω–∏–≤ —Ç—É—Ç —Ç–µ–∫—Å—Ç!';
const currentTopic = "manipulation";
const findElement = document.querySelector(`[data-topic=${currentTopic}]`);
// console.log(findElement);
findElement.style.backgroundColor = "blue";
const completed = document.querySelector(".completed");
// console.log(completed);

completed.parentNode.remove();
// console.log(completed);
const par = document.createElement("p");
par.textContent = "–û–±'—î–∫—Ç–Ω–∞ –º–æ–¥–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞ (Document Object Model)";
title.after(par);

// const supTitle = document.createElement("h3");
// supTitle.textContent = "–í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å innerHTML";
// const parag = document.createElement("p");
// parag.textContent =
//   "–©–µ –æ–¥–∏–Ω —Å–ø–æ—Å—ñ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ DOM-–µ–ª–µ–º–µ–Ω—Ç–∏ —ñ –ø–æ–º—ñ—Å—Ç–∏—Ç–∏ —ó—Ö –≤ –¥–µ—Ä–µ–≤–æ - —Ü–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä—è–¥–∫–∏ –∑ —Ç–µ–≥–∞–º–∏ —ñ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä—É –∑—Ä–æ–±–∏—Ç–∏ –≤—Å—é –≤–∞–∂–∫—É —Ä–æ–±–æ—Ç—É";
// const listItem = document.createElement("li");
// listItem.append(supTitle, parag);

// list.append(listItem);

// const markup =
//   "<li> <h3>–í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å innerHTML</h3> <p>–©–µ –æ–¥–∏–Ω —Å–ø–æ—Å—ñ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ DOM-–µ–ª–µ–º–µ–Ω—Ç–∏ —ñ –ø–æ–º—ñ—Å—Ç–∏—Ç–∏ —ó—Ö –≤ –¥–µ—Ä–µ–≤–æ - —Ü–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä—è–¥–∫–∏ –∑ —Ç–µ–≥–∞–º–∏ —ñ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä—É –∑—Ä–æ–±–∏—Ç–∏ –≤—Å—é –≤–∞–∂–∫—É —Ä–æ–±–æ—Ç—É</p></li>";
// list.insertAdjacentHTML("beforeend", markup);

// list.innerHTML = "";

// ## 2. –í–∞–º –Ω–∞–¥–∞–Ω–æ –∫—ñ–ª—å–∫–∞ –º–∞—Å–∏–≤—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ñ—Ä—É–∫—Ç–∞–º–∏ (–Ω–∞–∑–≤–∞ —É –º–∞—Å–∏–≤—ñ –≤–∫–∞–∑—É—î –Ω–∞ —Ç–µ, –∫—É–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–º—ñ—Å—Ç–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ ul). `–°—Ç–≤–æ—Ä–∏` html-–µ–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫—É —ñ `–¥–æ–¥–∞–π` –π–æ–≥–æ —É —Ä–æ–∑–º—ñ—Ç–∫—É. –ü–æ–ø—Ä–∞–∫—Ç–∏–∫—É–π—Å—è –∑ –º–µ—Ç–æ–¥–∞–º–∏ `append`, `prepend`, `after`, `before` –∑–∞–ø–æ–≤–Ω–∏–≤—à–∏ –Ω–∏–º–∏ —Å–ø–∏—Å–æ–∫ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∑ –º–∞—Å–∏–≤—ñ–≤. –î–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–∏ –¥–æ–ø–æ–º—ñ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é `elementsOfIngridients`, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ –º–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–º–∞—Å–∏–≤ –∑ –ª—ñ—à–∫–∞–º–∏).

// const appendFruitList = ["appleüçé", "bananaüçå"];
// const prependFruitList = ["grapesüçá", "orangeüçä"];
// const beforeFruitList = ["strawberryüçì", "cherryüçí"];
// const afterFruitList = ["peachüçë", "kiwiü•ù"];

// const ul = document.createElement("ul")

// const elementsOfIngridientsli = function (arr) {
//   return arr.map(el => {
//     const liEl = document.createElement('li')
//     liEl.textContent = el
//     return liEl
//   })
// }
// console.log(elementsOfIngridientsli(appendFruitList))

// title.after(ul)
// ul.append(...elementsOfIngridientsli(appendFruitList))
// ul.prepend(...elementsOfIngridientsli(prependFruitList))
// ul.firstChild.after(...elementsOfIngridientsli(afterFruitList))
// ul.lastChild.before(...elementsOfIngridientsli(beforeFruitList))

const cachingDecoratorWithOneArgument = (func) => {
  const cache = new Map();
  return (x) => {
    if (cache.has(x)) {
      console.log("from cache", cache.get(x));
      return cache.get(x);
    }
    cache.set(x, func(x));
    console.log("calculated", cache.get(x));
    return cache.get(x);
  };
};

const cachingDecoratorWithSeveralArguments = (func) => {
  const cache = {};
  return (...args) => {
    const stringifiedArgs = JSON.stringify(args);
    if (cache[stringifiedArgs]) {
      console.log("from cache", cache[stringifiedArgs]);
      return cache[stringifiedArgs];
    }
    cache[stringifiedArgs] = func(...args);
    console.log("calculated", cache[stringifiedArgs]);

    return cache[stringifiedArgs];
  };
};

const firstDecoreatedFunc = cachingDecoratorWithOneArgument((a) => a * a);
const secondDecoreatedFunc = cachingDecoratorWithSeveralArguments(
  (a, b) => a * b
);

firstDecoreatedFunc(5);
firstDecoreatedFunc(5);
firstDecoreatedFunc(6);
firstDecoreatedFunc(6);

secondDecoreatedFunc(5, 6);
secondDecoreatedFunc(6, 7);
secondDecoreatedFunc(5, 6);
secondDecoreatedFunc(6, 7);
